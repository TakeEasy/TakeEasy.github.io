<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/07/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>某学城项目(1)</title>
    <url>/2024/07/18/%E6%9F%90%E5%AD%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE-1/</url>
    <content><![CDATA[<hr>
<h1 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h1><h2 id="1-pip换源"><a href="#1-pip换源" class="headerlink" title="1 pip换源"></a>1 pip换源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 pip3 install pymysql   国外很慢</span><br><span class="line">2 pip3 install pymysql -i  地址</span><br><span class="line">3 配置，以后pip3 install全走配好的源</span><br><span class="line">	-来到%APPDATA%</span><br><span class="line">    -创建一个pip文件夹</span><br><span class="line">    -新建一个文件pip.ini</span><br><span class="line">    -写入</span><br><span class="line">        [global]</span><br><span class="line">        index-url = http://pypi.douban.com/simple</span><br><span class="line">        [install]</span><br><span class="line">        use-mirrors =true</span><br><span class="line">        mirrors =http://pypi.douban.com/simple/</span><br><span class="line">        trusted-host =pypi.douban.com</span><br></pre></td></tr></table></figure>
<h2 id="2-虚拟环境搭建"><a href="#2-虚拟环境搭建" class="headerlink" title="2 虚拟环境搭建"></a>2 虚拟环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 不同的项目依赖不同的模块版本，不能共用一套环境，虚拟环境</span><br><span class="line">2 在系统的python环境中安装(windows)</span><br><span class="line">	-下载</span><br><span class="line">	  pip3 install virtualenv</span><br><span class="line">    pip3 install virtualenvwrapper-win</span><br><span class="line">	-修改环境变量</span><br><span class="line">    -WORKON_HOME: D:\Virtualenvs</span><br><span class="line">    -python安装路径，scripts文件下执行virtualenvwrapper.bat</span><br><span class="line">  linux</span><br><span class="line">  -下载</span><br><span class="line">	  pip3 install virtualenv</span><br><span class="line">    pip3 install virtualenvwrapper</span><br><span class="line">  # 先找到virtualenvwrapper的工作文件 virtualenvwrapper.sh 该文件可以刷新自定义配置 但需要找到它</span><br><span class="line">  # MacOS 可能的位置 /Library/Frameworks/Python.frameword/versions/版本号文件夹/bin</span><br><span class="line">  # Linux 可能的位置 /usr/local/bin   ~/.local/bin   /usr/bin</span><br><span class="line">  # 建议不论在哪 都要在 /usr/local/bin 目录下有一份</span><br><span class="line">  # 复制命令 sudo cp -rf ~/.local/bin/virtualenvwrapper.sh /usr/local/bin</span><br><span class="line">  -配置</span><br><span class="line">  # 在 ~/.bash_profile 完成配置 virtualenvwrapper的默认存放虚拟环境目录是 ~/.virtualenvs</span><br><span class="line">    # WORKON_HOME=自定义存放虚拟环境的绝对路径 如果需要就解注</span><br><span class="line">    # source ~/.bash_profile 在终端让配置生效</span><br><span class="line">  # VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3</span><br><span class="line">  # source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line">3 使用：</span><br><span class="line">	-workon  #列出有的虚拟环境（aaa）</span><br><span class="line">  -workon aaa # 使用这个虚拟环境</span><br><span class="line">  -deactivate # 退出当前环境</span><br><span class="line">  -mkvirtualenv -p python3 luffy # 创建虚拟环境</span><br><span class="line">  -rmvirtualenv 虚拟环境名字 # 删除虚拟环境</span><br><span class="line">4 安装django环境</span><br><span class="line">	pip install django</span><br><span class="line">  pip install djangorestframework</span><br><span class="line">  pip install djangorestframework-jwt</span><br><span class="line">  pip install django-filter # drf需要使用的数据过滤器</span><br><span class="line">  pip install pillow # 这个是user表里的ImageField 需要</span><br><span class="line">  pip install pymysql</span><br><span class="line">  pip install mysqlclient # 这个是的django默认使用的mysql模块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5 基于虚拟环境创建项目（不要再pycharm中选择虚拟环境了）</span><br><span class="line"></span><br><span class="line">6 项目依赖包的导出导入</span><br><span class="line">  pip freeze # 生成requirement.txt 文件</span><br><span class="line">  pip install -r requirement.txt # 从requirement文件安装</span><br><span class="line">  # 上面命令装不上的 需要使用whl文件装 windows上装的模块都是whl文件 去https://www.cgohlke.com/这个网站找对应模块的whl文件</span><br><span class="line">  pip install *****.whl # 通过命令装这个whl文件</span><br><span class="line"></span><br><span class="line">7 pip 离线安装第三方库</span><br><span class="line">  pip download -r requirement.txt -d &quot;D:\localdownload\&quot; # 先在有网络的机器上download包</span><br><span class="line">  pip insatll 包名 # copy到离线机器上安装</span><br></pre></td></tr></table></figure>

<h2 id="3-后台创建，配置修改，目录变更"><a href="#3-后台创建，配置修改，目录变更" class="headerlink" title="3 后台创建，配置修改，目录变更"></a>3 后台创建，配置修改，目录变更</h2><ul>
<li>创建Django项目之后 需要对目录进行修整<ol>
<li>apps目录 放所有的app 在原始app里 而不是根目录</li>
<li>settings目录 放setting文件 可以分成 开发环境和正式环境</li>
<li>根目录创建logs文件夹和scripts文件夹,原始app里创建media文件夹<img src="/2024/07/18/%E6%9F%90%E5%AD%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE-1/projectdir.png" class="" title="project dirs"></li>
</ol>
</li>
<li>由于改变了文件夹的结构 所以要在setting文件里 进行相应设置 例如添加环境变量和改变读取setting文件的位置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 在控制台直接指向项目 python manage.py runserver ---》manage.py的内容要改</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;luffyapi.settings.dev&#x27;</span>)</span><br><span class="line"><span class="comment"># 项目上线，走的不是manage.py---》uwsgi.py,需要修改</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;luffyapi.settings.dev&#x27;</span>)</span><br><span class="line"><span class="comment"># 在dev.py中 需要把原始app目录和settings目录都加入到环境变量中</span></span><br><span class="line">BASE_DIR = Path(__file__).resolve().parent.parent</span><br><span class="line">sys.path.append(<span class="built_in">str</span>(BASE_DIR))</span><br><span class="line">sys.path.append(<span class="built_in">str</span>(BASE_DIR / <span class="string">&#x27;apps&#x27;</span>))</span><br><span class="line"><span class="comment"># 国际化 in dev.py</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/shanghai&#x27;</span></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 创建app：startapp在哪执行，就把app创建在哪</span></span><br><span class="line">python ../../manage.py startapp home</span><br><span class="line"><span class="comment"># 注册app 由于添加了环境变量 就可以直接正常添加</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;user.apps.UserConfig&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;home.apps.HomeConfig&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 配置media目录和url</span></span><br><span class="line">MEDIA_URL = <span class="string">&#x27;media/&#x27;</span></span><br><span class="line">MEDIA_ROOT = BASE_DIR / <span class="string">&#x27;media&#x27;</span></span><br><span class="line"><span class="comment"># 然后在urls中配置media开放</span></span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings <span class="comment"># 从django.conf导入settings 不要直接导入settings文件</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    re_path(<span class="string">r&quot;^media/(?P&lt;path&gt;.*)$&quot;</span>, serve, &#123;<span class="string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>tips 改变了目录结构后 你的pycharm 不知道你改变了根目录 所以一些导入会误报错 可以通过 标记为根目录解决</p>
</blockquote>
<img src="/2024/07/18/%E6%9F%90%E5%AD%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE-1/markassourcesroot.png" class="" title="mark as root">

<h2 id="4-数据库配置"><a href="#4-数据库配置" class="headerlink" title="4 数据库配置"></a>4 数据库配置</h2><ul>
<li>创建database,创建能使用这个database的user</li>
<li>在setting文件中配置数据库链接 django默认用mysqlclient,如果想用pymysql需要加install代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目依赖的数据库，luffyapi</span></span><br><span class="line">create database luffyapi;</span><br><span class="line"><span class="comment"># 创建数据库用户，并且授予luffyapi这个库的权限</span></span><br><span class="line">grant <span class="built_in">all</span> privileges on luffyapi.* to <span class="string">&#x27;luffyapi&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;Luffy123?&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># setting文件中配置 可以做2个数据库 一个负责读一个负责写 主从搭建 速度就快了</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;luffyapi&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;luffyapi&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;Luffy123?&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>: <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果想用pymysql</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-User表配置"><a href="#5-User表配置" class="headerlink" title="5 User表配置"></a>5 User表配置</h2><ul>
<li>如果想用django的内置auth的user表(继承AbstractUser类),必须在数据库迁移命令之前操作好,否则按下面操作<ol>
<li>把所有app下的迁移文件全部删除 包括 admin auth app下的</li>
<li>删除数据库 删之前可以导出数据</li>
<li>重新迁移</li>
</ol>
</li>
</ul>
<h2 id="6-Vue前端准备"><a href="#6-Vue前端准备" class="headerlink" title="6 Vue前端准备"></a>6 Vue前端准备</h2><ul>
<li>安装node.js</li>
<li>运行相关命令 初始化一个Vue项目<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm create vue@latest</span><br></pre></td></tr></table></figure></li>
<li>初始化的选项 选上Pinia 用作状态管理 选上vue-router 用作单页面路由</li>
<li>目录介绍<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public</span><br><span class="line">    -favicon.ico   # </span><br><span class="line">src</span><br><span class="line">    -assets  #静态文件，js，css，img</span><br><span class="line">    -components # 小组件，头部组件，尾部组件</span><br><span class="line">    -router     # 路由相关</span><br><span class="line">    -store      # vuex相关，状态管理器，临时存储数据的地方</span><br><span class="line">    -views      # 页面组件</span><br><span class="line">    -App.vue    # 根组件</span><br><span class="line">    -main.js    # 配置文件（跟django的setting一样）</span><br><span class="line">-index.html    #整个项目的单页面</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">#任何一个组件都有三部分</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">      #html相关</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    # css相关</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    # js相关</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>django-rest-framework</tag>
        <tag>Django</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>某学城项目(2)</title>
    <url>/2024/07/21/%E6%9F%90%E5%AD%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE-2/</url>
    <content><![CDATA[<hr>
<h1 id="项目基础配置"><a href="#项目基础配置" class="headerlink" title="项目基础配置"></a>项目基础配置</h1><h2 id="全局Response封装"><a href="#全局Response封装" class="headerlink" title="全局Response封装"></a>全局Response封装</h2><ul>
<li>对drf里的Response进行一个封装,让返回的数据可以统一带上我们自定义的code和msg</li>
<li>在根app目录创建utils文件夹 下添加 luffyresponse.py</li>
<li>继承Response类 在init里面 先封装一层自己的数据 然后把自己的数据打包传给Response的init的data参数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APIResponse</span>(<span class="title class_ inherited__">Response</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, code=<span class="number">1000</span>, msg=<span class="string">&#x27;ok&#x27;</span>, data=<span class="literal">None</span>, status=<span class="literal">None</span>, headers=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        back_dic = &#123;<span class="string">&#x27;code&#x27;</span>: code, <span class="string">&#x27;msg&#x27;</span>: msg&#125;</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            back_dic[<span class="string">&#x27;data&#x27;</span>] = data</span><br><span class="line">        back_dic.update(kwargs)</span><br><span class="line">        <span class="built_in">super</span>().__init__(data=back_dic, status=status, headers=headers)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="全局异常捕获"><a href="#全局异常捕获" class="headerlink" title="全局异常捕获"></a>全局异常捕获</h2><ul>
<li>在utils里创建 luffyexception.py</li>
<li>创建一个handler函数 先用drf默认的handler函数处理错误</li>
<li>如果错误默认函数处理不了 就我们自己捕获并用上面创建的Response来返回</li>
<li>在其中要添加记录日志的功能<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler</span><br><span class="line"><span class="keyword">from</span> rest_framework.status <span class="keyword">import</span> HTTP_500_INTERNAL_SERVER_ERROR</span><br><span class="line"><span class="keyword">from</span> .luffyresponse <span class="keyword">import</span> LuffyResponse</span><br><span class="line"><span class="keyword">from</span> .luffylogger <span class="keyword">import</span> luffy_logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">luffy_exception_handler</span>(<span class="params">exc, context</span>):</span><br><span class="line">    api_response = exception_handler(exc, context)</span><br><span class="line">    luffy_logger.error(<span class="string">f&#x27;view:<span class="subst">&#123;context[<span class="string">&quot;view&quot;</span>].__class__.__name__&#125;</span> error:<span class="subst">&#123;<span class="built_in">str</span>(exc)&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> api_response:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(exc, ZeroDivisionError):</span><br><span class="line">            <span class="keyword">return</span> LuffyResponse(code=<span class="number">5000</span>, msg=<span class="string">f&#x27;不能除以0哦:<span class="subst">&#123;<span class="built_in">str</span>(exc)&#125;</span>&#x27;</span>, status=HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line">        <span class="keyword">return</span> LuffyResponse(code=<span class="number">5000</span>, msg=<span class="string">f&#x27;未知错误:<span class="subst">&#123;<span class="built_in">str</span>(exc)&#125;</span>&#x27;</span>, status=HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="keyword">return</span> LuffyResponse(code=<span class="number">5000</span>, msg=api_response.data.get(<span class="string">&#x27;detail&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li>需要在配置文件dev.py 中配置 drf的错误handler函数 用我们自己写的<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">  <span class="string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="string">&#x27;utils.luffyexception.luffy_exception_handler&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><ul>
<li>使用python内置的logging配置模块</li>
<li>从django文档拷贝一份基础的logging配置 添加文件记录的handler</li>
<li>在setting文件dev.py中添加<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;disable_existing_loggers&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&quot;formatters&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;verbose&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;format&quot;</span>: <span class="string">&quot;&#123;levelname&#125; &#123;asctime&#125; &#123;module&#125; &#123;process:d&#125; &#123;thread:d&#125; &#123;message&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;style&quot;</span>: <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;simple&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;format&quot;</span>: <span class="string">&quot;&#123;levelname&#125; &#123;message&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;style&quot;</span>: <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;filters&quot;</span>: &#123;</span><br><span class="line">        <span class="comment"># &quot;special&quot;: &#123;</span></span><br><span class="line">        <span class="comment">#     &quot;()&quot;: &quot;project.logging.SpecialFilter&quot;,</span></span><br><span class="line">        <span class="comment">#     &quot;foo&quot;: &quot;bar&quot;,</span></span><br><span class="line">        <span class="comment"># &#125;,</span></span><br><span class="line">        <span class="string">&quot;require_debug_true&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;()&quot;</span>: <span class="string">&quot;django.utils.log.RequireDebugTrue&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;handlers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;console&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;level&quot;</span>: <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">            <span class="string">&quot;filters&quot;</span>: [<span class="string">&quot;require_debug_true&quot;</span>],</span><br><span class="line">            <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.StreamHandler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># 实际开发建议使用ERROR</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">            <span class="comment"># 日志位置,日志文件名,日志保存目录必须手动创建，注：这里的文件路径要注意BASE_DIR代表的是小luffyapi</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: BASE_DIR.parent / <span class="string">&#x27;logs&#x27;</span> / <span class="string">&#x27;luffy.log&#x27;</span>,</span><br><span class="line">            <span class="comment"># 日志文件的最大值,这里我们设置300M</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">300</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="comment"># 日志文件的数量,设置最大日志数量为10</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;verbose&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># &quot;mail_admins&quot;: &#123;</span></span><br><span class="line">        <span class="comment">#     &quot;level&quot;: &quot;ERROR&quot;,</span></span><br><span class="line">        <span class="comment">#     &quot;class&quot;: &quot;django.utils.log.AdminEmailHandler&quot;,</span></span><br><span class="line">        <span class="comment">#     &quot;filters&quot;: [&quot;special&quot;],</span></span><br><span class="line">        <span class="comment"># &#125;,</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;loggers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;django&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;handlers&quot;</span>: [<span class="string">&quot;console&quot;</span>, <span class="string">&#x27;file&#x27;</span>],</span><br><span class="line">            <span class="string">&quot;propagate&quot;</span>: <span class="literal">True</span>,  <span class="comment"># 是否让日志信息继续冒泡给其他的日志处理系统</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># &quot;django.request&quot;: &#123;</span></span><br><span class="line">        <span class="comment">#     &quot;handlers&quot;: [&quot;mail_admins&quot;],</span></span><br><span class="line">        <span class="comment">#     &quot;level&quot;: &quot;ERROR&quot;,</span></span><br><span class="line">        <span class="comment">#     &quot;propagate&quot;: False,</span></span><br><span class="line">        <span class="comment"># &#125;,</span></span><br><span class="line">        <span class="comment"># &quot;myproject.custom&quot;: &#123;</span></span><br><span class="line">        <span class="comment">#     &quot;handlers&quot;: [&quot;console&quot;, &quot;mail_admins&quot;],</span></span><br><span class="line">        <span class="comment">#     &quot;level&quot;: &quot;INFO&quot;,</span></span><br><span class="line">        <span class="comment">#     &quot;filters&quot;: [&quot;special&quot;],</span></span><br><span class="line">        <span class="comment"># &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>在utils下创建luffylogger.py 获取相应的logger<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">luffy_logger = logging.getLogger(<span class="string">&#x27;django&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="跨域问题解决"><a href="#跨域问题解决" class="headerlink" title="跨域问题解决"></a>跨域问题解决</h2><ul>
<li>同源策略 请求的url地址 必须与浏览器上的url地址处于同域上 也就是域名 端口 协议 相同</li>
<li>如果不同源发送请求 其实请求过去了 也返回了 但是浏览器拦截了</li>
<li>通过在Response headers中添加Access-Control-Allow-Origin 允许谁 可以跨域<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> LuffyResponse(headers=&#123;<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>:<span class="string">&#x27;127.0.0.1:8008&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li>
<li>这就叫 CORS 跨域资源共享</li>
<li>xss 跨站脚本攻击 csrf 跨站请求伪造</li>
<li>CORS 分为简单请求和非简单请求<br> simple request 同时满足下面两个条件 一次发送<ul>
<li>请求方法是 HEAD GET POST 之一</li>
<li>HTTP头信息不超出以下几种字段<br>  Accept<br>  Accept-Language<br>  Content-Language<br>  Last-Event-ID<br>  Content-Type 只限于三个值 application&#x2F;x-www-form-urlencoded,mutilpart&#x2F;form-data,text&#x2F;plain  注意 没有json<br> not-so-simple request 例如 post 数据格式json</li>
<li>非简单请求发两次 一次OPTIONS请求 服务端可以判断让不让继续发 一次真正的请求</li>
<li>需要在views里配置options方法 处理  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> request.method==<span class="string">&#x27;OPTIONS&#x27;</span>:</span><br><span class="line">    res=HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    res[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>]=<span class="string">&#x27;*&#x27;</span> <span class="comment">#这是允许浏览器通过</span></span><br><span class="line">    res[<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>]=<span class="string">&#x27;Content-Type&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>作为通用处理 统一写到中间件里去 在utils里创建luffymiddle.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">CORSMiddle</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">      <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">          response[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span>  <span class="comment"># 这是允许浏览器通过</span></span><br><span class="line">          <span class="keyword">if</span> request.method == <span class="string">&#x27;OPTIONS&#x27;</span>:</span><br><span class="line">              response[<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>] = <span class="string">&#x27;Content-Type&#x27;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></li>
<li>在配置文件dev.py中将上面的中间件添加上去<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">      <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;luffyapi.utils.luffymiddle.CORSMiddle&#x27;</span>,</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li>
<li>已经有第三方库解决 django-cors-headers<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到 dev.py中安装这个app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间件也要添加</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还要添加相关配置</span></span><br><span class="line"><span class="comment"># CORS_ALLOW_CREDENTIALS = True</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line"><span class="comment"># CORS_ORIGIN_WHITELIST = (</span></span><br><span class="line"><span class="comment">#   &#x27;*&#x27;,</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line">CORS_ALLOW_METHODS = (</span><br><span class="line">    <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;OPTIONS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PATCH&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;VIEW&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">CORS_ALLOW_HEADERS = (</span><br><span class="line">    <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X_FILENAME&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-encoding&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dnt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-csrftoken&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;authorization&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="前后端打通"><a href="#前后端打通" class="headerlink" title="前后端打通"></a>前后端打通</h2><ul>
<li>前端可以发送ajax请求 vue用的是axios  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure></li>
<li>main.js 中 导入axios 并且在createApp的property中配置一个$axios</li>
<li>以上是vue2的配置方法 还有vue3的配置方法 参考这篇文章 <a href="https://blog.csdn.net/weixin_56650035/article/details/125610295">vue2 vue3 配置axios</a></li>
<li>或者可以使用vue-axios包 <a href="https://www.npmjs.com/package/vue-axios">npm vue-axios</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save vue-axios</span><br><span class="line">// main.js 中</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import VueAxios from &#x27;vue-axios&#x27;</span><br><span class="line">...</span><br><span class="line">app.use(VueAxios, axios)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="前端基础包安装使用"><a href="#前端基础包安装使用" class="headerlink" title="前端基础包安装使用"></a>前端基础包安装使用</h2><ul>
<li><a href="https://www.npmjs.com/package/vue-cookies">vue-cookies</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save vue-cookies</span><br><span class="line">// main.js 中</span><br><span class="line">import VueCookies from &#x27;vue-cookies&#x27;</span><br><span class="line">...</span><br><span class="line">app.use(VueCookies)</span><br><span class="line">// 使用</span><br><span class="line">const $cookies = inject(&#x27;$cookies&#x27;)</span><br></pre></td></tr></table></figure></li>
<li><a href="https://element-plus.org/zh-CN/guide/design.html">element-plus</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save element-plus</span><br><span class="line">// main.js 中</span><br><span class="line">import ElementPlus from &#x27;element-plus&#x27;</span><br><span class="line">import &#x27;element-plus/dist/index.css&#x27;</span><br><span class="line">...</span><br><span class="line">app.use(ElementPlus)</span><br></pre></td></tr></table></figure></li>
<li><a href="https://v3.bootcss.com/getting-started/">bootstrap</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save bootstrap@3</span><br><span class="line">// main.js 中</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><a href="https://jquery.com/">jquery</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save jquery</span><br><span class="line">// main.js 中</span><br><span class="line">window.$ = window.jQuery = require(&#x27;jquery&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="xadmin使用-好像已经黄了"><a href="#xadmin使用-好像已经黄了" class="headerlink" title="xadmin使用 好像已经黄了"></a><del>xadmin使用 <em>好像已经黄了</em></del></h2><ul>
<li>创建superuser root root123  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python .\manage.py createsuperuser</span><br></pre></td></tr></table></figure></li>
<li>使用xadmin <a href="https://xadmin.readthedocs.io/en/docs-chinese/index.html">xadmin文档</a> <strong>好像已经黄了</strong></li>
<li>安装 配置  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-xadmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在setting中install app</span></span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;xadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;crispy_forms&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;reversion&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在主urls中配置路由</span></span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line">xadmin.autodiscover()</span><br><span class="line"></span><br><span class="line"><span class="comment"># version模块自动注册需要版本控制的 Model</span></span><br><span class="line"><span class="keyword">from</span> xadmin.plugins <span class="keyword">import</span> xversion</span><br><span class="line">xversion.register_models()</span><br><span class="line"></span><br><span class="line">urlpatterns = patterns(<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    url(<span class="string">r&#x27;xadmin/&#x27;</span>, include(xadmin.site.urls)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="改用SimpleUI"><a href="#改用SimpleUI" class="headerlink" title="改用SimpleUI"></a>改用SimpleUI</h2><ul>
<li>使用文档 <a href="https://newpanjing.github.io/simpleui_docs/config.html">SimpleUI</a> <a href="https://github.com/newpanjing/simpleui">SimpleUI github 页面</a></li>
<li>安装simpleui  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install django-simpleui</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>django-rest-framework</tag>
        <tag>Django</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>某学城项目(3)</title>
    <url>/2024/07/22/%E6%9F%90%E5%AD%A6%E5%9F%8E%E9%A1%B9%E7%9B%AE-3/</url>
    <content><![CDATA[<hr>
<h1 id="前端基本搭建和Git管控代码"><a href="#前端基本搭建和Git管控代码" class="headerlink" title="前端基本搭建和Git管控代码"></a>前端基本搭建和Git管控代码</h1><h2 id="头部组件"><a href="#头部组件" class="headerlink" title="头部组件"></a>头部组件</h2><ul>
<li>导航条每个页面都有 固定 在components 目录下添加Head.vue  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;slogan&quot;&gt;</span><br><span class="line">            &lt;p&gt;老男孩IT教育 | 帮助有志向的年轻人通过努力学习获得体面的工作和生活&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">            &lt;ul class=&quot;left-part&quot;&gt;</span><br><span class="line">                &lt;li class=&quot;logo&quot;&gt;</span><br><span class="line">                    &lt;router-link to=&quot;/&quot;&gt;</span><br><span class="line">                        &lt;img src=&quot;../assets/img/head-logo.svg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                    &lt;/router-link&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;ele&quot;&gt;</span><br><span class="line">                    &lt;span @click=&quot;goPage(&#x27;/free-course&#x27;)&quot; :class=&quot;&#123;active: url_path === &#x27;/free-course&#x27;&#125;&quot;&gt;免费课&lt;/span&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;ele&quot;&gt;</span><br><span class="line">                    &lt;span @click=&quot;goPage(&#x27;/actual-course&#x27;)&quot; :class=&quot;&#123;active: url_path === &#x27;/actual-course&#x27;&#125;&quot;&gt;实战课&lt;/span&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;ele&quot;&gt;</span><br><span class="line">                    &lt;span @click=&quot;goPage(&#x27;/light-course&#x27;)&quot; :class=&quot;&#123;active: url_path === &#x27;/light-course&#x27;&#125;&quot;&gt;轻课&lt;/span&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;right-part&quot;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;span&gt;登录&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;line&quot;&gt;|&lt;/span&gt;</span><br><span class="line">                    &lt;span&gt;注册&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Header&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                url_path: sessionStorage.url_path || &#x27;/&#x27;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            goPage(url_path) &#123;</span><br><span class="line">                // 传入的路由如果不是当前所在路径，就跳转</span><br><span class="line">                if (this.url_path !== url_path) &#123;</span><br><span class="line">                    this.$router.push(url_path);</span><br><span class="line">                &#125;</span><br><span class="line">                sessionStorage.url_path = url_path;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            sessionStorage.url_path = this.$route.path;</span><br><span class="line">            this.url_path = this.$route.path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .header &#123;</span><br><span class="line">        background-color: white;</span><br><span class="line">        box-shadow: 0 0 5px 0 #aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .header:after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .slogan &#123;</span><br><span class="line">        background-color: #eee;</span><br><span class="line">        height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .slogan p &#123;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        color: #aaa;</span><br><span class="line">        font-size: 13px;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .nav &#123;</span><br><span class="line">        background-color: white;</span><br><span class="line">        user-select: none;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .nav ul &#123;</span><br><span class="line">        padding: 15px 0;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .nav ul:after &#123;</span><br><span class="line">        clear: both;</span><br><span class="line">        content: &#x27;&#x27;;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .nav ul li &#123;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .logo &#123;</span><br><span class="line">        margin-right: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .ele &#123;</span><br><span class="line">        margin: 0 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .ele span &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        font: 15px/36px &#x27;微软雅黑&#x27;;</span><br><span class="line">        border-bottom: 2px solid transparent;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .ele span:hover &#123;</span><br><span class="line">        border-bottom-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .ele span.active &#123;</span><br><span class="line">        color: orange;</span><br><span class="line">        border-bottom-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right-part &#123;</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right-part .line &#123;</span><br><span class="line">        margin: 0 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right-part span &#123;</span><br><span class="line">        line-height: 68px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="尾部组件"><a href="#尾部组件" class="headerlink" title="尾部组件"></a>尾部组件</h2><ul>
<li>尾部组件同样每个页面都有 在components目录下添加Footer.vue  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;关于我们&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;联系我们&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;商务合作&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;帮助中心&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;意见反馈&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;新手指南&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;p&gt;Copyright © luffycity.com版权所有 | 京ICP备17072161号-1&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Footer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .footer &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 128px;</span><br><span class="line">        background: #25292e;</span><br><span class="line">        color: #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer ul &#123;</span><br><span class="line">        margin: 0 auto 16px;</span><br><span class="line">        padding-top: 38px;</span><br><span class="line">        width: 810px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer ul li &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 112px;</span><br><span class="line">        margin: 0 10px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer ul::after &#123;</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer p &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="轮播图组件"><a href="#轮播图组件" class="headerlink" title="轮播图组件"></a>轮播图组件</h2><ul>
<li>首页轮播图 用elementui里的跑马灯 在components目录下添加Banner.vue  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div name=&quot;banner&quot; class=&quot;block text-center&quot;&gt;</span><br><span class="line">    &lt;el-carousel height=&quot;auto&quot; :autoplay=&quot;false&quot; v-if=&quot;banner_list[0]&quot;&gt;</span><br><span class="line">    &lt;el-carousel-item v-for=&quot;item in banner_list&quot;&gt;</span><br><span class="line">        &lt;!-- &lt;h3 class=&quot;small justify-center&quot; text=&quot;2xl&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/h3&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;img src=&quot;../assets/img/banner1.png&quot;&gt; --&gt;</span><br><span class="line">        &lt;RouterLink :to=&quot;item.link&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;item.img&quot; :alt=&quot;item.name&quot;&gt;</span><br><span class="line">        &lt;/RouterLink&gt;</span><br><span class="line">    &lt;/el-carousel-item&gt;</span><br><span class="line">    &lt;/el-carousel&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;inject&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Banner&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            banner_list:[],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        const $settings=inject(&quot;$settings&quot;)</span><br><span class="line">        //当banner组件一创建 就向后端发请求 拿轮播图数据</span><br><span class="line">        this.axios.get($settings.base_url+&#x27;/home/banner/&#x27;).then(response=&gt;&#123;</span><br><span class="line">            console.log(response.data)</span><br><span class="line">            this.banner_list=response.data</span><br><span class="line">        &#125;).catch(error=&gt;&#123;&#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.demonstration &#123;</span><br><span class="line">color: var(--el-text-color-secondary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* .el-carousel__item h3 &#123;</span><br><span class="line">color: #475669;</span><br><span class="line">opacity: 0.75;</span><br><span class="line">line-height: 600px;</span><br><span class="line">margin: 0;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125; */</span><br><span class="line"></span><br><span class="line">.el-carousel__item &#123;</span><br><span class="line">        height: 800px;</span><br><span class="line">        min-width: 1200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">.el-carousel__item img &#123;</span><br><span class="line">    height: 800px;</span><br><span class="line">    /*margin-left: 20px;*/</span><br><span class="line">    margin-left: calc(50% - 3840px / 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* .el-carousel__item:nth-child(2n) &#123;</span><br><span class="line">background-color: #99a9bf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-carousel__item:nth-child(2n + 1) &#123;</span><br><span class="line">background-color: #d3dce6;</span><br><span class="line">&#125; */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
<li>展示哪些图片 展示多少 我们通过ajax去后端数据库取 所以先在homeapp里操作<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将每个表都要有的字段 我们抽象出来 放到utils下luffymodels.py 里</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseModel</span>(models.Model):</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="literal">True</span>, create_time=<span class="string">&#x27;最后更新时间&#x27;</span>)</span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;是否删除&#x27;</span>)</span><br><span class="line">    is_show = models.BooleanField(default=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;是否展示&#x27;</span>)</span><br><span class="line">    display_order = models.IntegerField(verbose_name=<span class="string">&#x27;展示顺序&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到home app下的models.py创建表</span></span><br><span class="line"><span class="keyword">from</span> luffyapi.utils.luffymodels <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Banner</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    img = models.ImageField(verbose_name=<span class="string">&#x27;轮播图片&#x27;</span>, help_text=<span class="string">&#x27;图片尺寸必须是:3840*800&#x27;</span>)</span><br><span class="line">    link = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">&#x27;跳转链接&#x27;</span>)</span><br><span class="line">    info = models.TextField(verbose_name=<span class="string">&#x27;图片简介&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到home app目录下创建drf序列化器 ser.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BannerModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = models.Banner</span><br><span class="line">        fields = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;img&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到Views里根据需要的接口选择相应的drfView继承使用</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView, ListAPIView</span><br><span class="line"><span class="keyword">from</span> luffyapi.utils.luffylogger <span class="keyword">import</span> luffy_logger</span><br><span class="line"><span class="keyword">from</span> luffyapi.utils.luffyresponse <span class="keyword">import</span> LuffyResponse</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> ser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BannerView</span>(<span class="title class_ inherited__">ListAPIView</span>):</span><br><span class="line">    queryset = models.Banner.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).order_by(<span class="string">&#x27;display_order&#x27;</span>)[</span><br><span class="line">               :settings.BANNER_COUNTER]  <span class="comment"># 可以通过settings 里的配置 来控制轮播图的展示数量</span></span><br><span class="line">    serializer_class = ser.BannerModelSerializer</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BannerViewSet</span>(GenericViewSet, ListModelMixin): <span class="comment"># 使用ViewSet </span></span><br><span class="line">    queryset = models.Banner.objects.<span class="built_in">filter</span>(is_delete=<span class="literal">False</span>, is_show=<span class="literal">True</span>).order_by(<span class="string">&#x27;display_order&#x27;</span>)[</span><br><span class="line">               :settings.BANNER_COUNTER]</span><br><span class="line">    serializer_class = ser.BannerModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据继承的View使用不同的路由配置方法 urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> SimpleRouter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">router = SimpleRouter()</span><br><span class="line">router.register(<span class="string">&#x27;banner2&#x27;</span>, views.BannerViewSet, <span class="string">&#x27;banner2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;banner/&#x27;</span>, views.BannerView.as_view()),</span><br><span class="line">    <span class="comment"># path(&#x27;banner2/&#x27;, views.BannerViewSet.as_view(&#123;&#x27;get&#x27;: &#x27;list&#x27;&#125;)) 这是另一种配置方法</span></span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>用 axios在created生命周期的时候去后端获取banner数据</li>
<li><strong>会遇到跑马灯第一页不显示的问题</strong> 要在跑马灯组件加个v-if判断 等banner_list有值了再开始渲染 代码参照上面banner.vue</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>django-rest-framework</tag>
        <tag>Django</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
</search>
